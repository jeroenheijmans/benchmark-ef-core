// <auto-generated />
using System;
using BenchmarkEfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BenchmarkEfCore.Migrations
{
    [DbContext(typeof(FooDbContext))]
    partial class FooDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BenchmarkEfCore.AggregateRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Bar0");

                    b.Property<bool>("Bar1");

                    b.Property<bool>("Bar2");

                    b.Property<bool?>("Bar3");

                    b.Property<bool?>("Bar4");

                    b.Property<int>("Baz0");

                    b.Property<int>("Baz1");

                    b.Property<int>("Baz2");

                    b.Property<int>("Baz3");

                    b.Property<int?>("Baz4");

                    b.Property<int?>("Baz5");

                    b.Property<string>("Foo0");

                    b.Property<string>("Foo1");

                    b.Property<string>("Foo2");

                    b.Property<string>("Foo3");

                    b.Property<string>("Foo4");

                    b.Property<string>("Foo5");

                    b.Property<string>("Foo6")
                        .HasMaxLength(100);

                    b.Property<string>("Foo7")
                        .HasMaxLength(1000);

                    b.Property<string>("Foo8")
                        .HasMaxLength(250);

                    b.Property<string>("Foo9")
                        .HasMaxLength(200);

                    b.Property<int>("OptionA");

                    b.Property<int>("OptionB");

                    b.Property<int>("OptionC");

                    b.Property<int?>("OptionD");

                    b.Property<int?>("OptionE");

                    b.Property<int?>("OptionF");

                    b.Property<Guid?>("RelatedEntityId");

                    b.Property<DateTimeOffset>("Stamp1");

                    b.Property<DateTimeOffset>("Stamp2");

                    b.Property<DateTimeOffset>("Stamp3");

                    b.Property<DateTimeOffset?>("Stamp4");

                    b.Property<DateTimeOffset?>("Stamp5");

                    b.HasKey("Id");

                    b.HasIndex("RelatedEntityId");

                    b.ToTable("Roots");
                });

            modelBuilder.Entity("BenchmarkEfCore.RelatedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAtUtc");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("RelatedItems");
                });

            modelBuilder.Entity("BenchmarkEfCore.AggregateRoot", b =>
                {
                    b.HasOne("BenchmarkEfCore.RelatedEntity", "RelatedEntity")
                        .WithMany()
                        .HasForeignKey("RelatedEntityId");

                    b.OwnsOne("BenchmarkEfCore.ChildOne", "ChildOne", b1 =>
                        {
                            b1.Property<Guid>("AggregateRootId");

                            b1.Property<bool>("Bar0");

                            b1.Property<bool>("Bar1");

                            b1.Property<bool>("Bar2");

                            b1.Property<bool?>("Bar3");

                            b1.Property<bool?>("Bar4");

                            b1.Property<int>("Baz0");

                            b1.Property<int>("Baz1");

                            b1.Property<int>("Baz2");

                            b1.Property<int>("Baz3");

                            b1.Property<int?>("Baz4");

                            b1.Property<int?>("Baz5");

                            b1.Property<string>("Foo0");

                            b1.Property<string>("Foo1");

                            b1.Property<string>("Foo2");

                            b1.Property<string>("Foo3");

                            b1.Property<string>("Foo4");

                            b1.Property<string>("Foo5");

                            b1.Property<string>("Foo6");

                            b1.Property<string>("Foo7");

                            b1.Property<string>("Foo8");

                            b1.Property<string>("Foo9");

                            b1.Property<int>("OptionA");

                            b1.Property<int>("OptionB");

                            b1.Property<int>("OptionC");

                            b1.Property<int?>("OptionD");

                            b1.Property<int?>("OptionE");

                            b1.Property<int?>("OptionF");

                            b1.Property<string>("OwnedValueObjects");

                            b1.HasKey("AggregateRootId");

                            b1.ToTable("Roots");

                            b1.HasOne("BenchmarkEfCore.AggregateRoot")
                                .WithOne("ChildOne")
                                .HasForeignKey("BenchmarkEfCore.ChildOne", "AggregateRootId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("BenchmarkEfCore.ChildTwo", "ChildTwo1", b1 =>
                        {
                            b1.Property<Guid>("AggregateRootId");

                            b1.Property<bool>("Bar0");

                            b1.Property<bool>("Bar1");

                            b1.Property<bool>("Bar2");

                            b1.Property<bool?>("Bar3");

                            b1.Property<bool?>("Bar4");

                            b1.Property<int>("Baz0");

                            b1.Property<int>("Baz1");

                            b1.Property<int>("Baz2");

                            b1.Property<int>("Baz3");

                            b1.Property<int?>("Baz4");

                            b1.Property<int?>("Baz5");

                            b1.Property<string>("Foo0");

                            b1.Property<string>("Foo1");

                            b1.Property<string>("Foo2");

                            b1.Property<string>("Foo3");

                            b1.Property<string>("Foo4");

                            b1.Property<string>("Foo5");

                            b1.Property<string>("Foo6");

                            b1.Property<string>("Foo7");

                            b1.Property<string>("Foo8");

                            b1.Property<string>("Foo9");

                            b1.Property<int>("OptionA");

                            b1.Property<int>("OptionB");

                            b1.Property<int>("OptionC");

                            b1.Property<int?>("OptionD");

                            b1.Property<int?>("OptionE");

                            b1.Property<int?>("OptionF");

                            b1.HasKey("AggregateRootId");

                            b1.ToTable("Roots");

                            b1.HasOne("BenchmarkEfCore.AggregateRoot")
                                .WithOne("ChildTwo1")
                                .HasForeignKey("BenchmarkEfCore.ChildTwo", "AggregateRootId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("BenchmarkEfCore.ChildTwo", "ChildTwo2", b1 =>
                        {
                            b1.Property<Guid>("AggregateRootId");

                            b1.Property<bool>("Bar0");

                            b1.Property<bool>("Bar1");

                            b1.Property<bool>("Bar2");

                            b1.Property<bool?>("Bar3");

                            b1.Property<bool?>("Bar4");

                            b1.Property<int>("Baz0");

                            b1.Property<int>("Baz1");

                            b1.Property<int>("Baz2");

                            b1.Property<int>("Baz3");

                            b1.Property<int?>("Baz4");

                            b1.Property<int?>("Baz5");

                            b1.Property<string>("Foo0");

                            b1.Property<string>("Foo1");

                            b1.Property<string>("Foo2");

                            b1.Property<string>("Foo3");

                            b1.Property<string>("Foo4");

                            b1.Property<string>("Foo5");

                            b1.Property<string>("Foo6");

                            b1.Property<string>("Foo7");

                            b1.Property<string>("Foo8");

                            b1.Property<string>("Foo9");

                            b1.Property<int>("OptionA");

                            b1.Property<int>("OptionB");

                            b1.Property<int>("OptionC");

                            b1.Property<int?>("OptionD");

                            b1.Property<int?>("OptionE");

                            b1.Property<int?>("OptionF");

                            b1.HasKey("AggregateRootId");

                            b1.ToTable("Roots");

                            b1.HasOne("BenchmarkEfCore.AggregateRoot")
                                .WithOne("ChildTwo2")
                                .HasForeignKey("BenchmarkEfCore.ChildTwo", "AggregateRootId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("BenchmarkEfCore.ChildTwo", "ChildTwo3", b1 =>
                        {
                            b1.Property<Guid>("AggregateRootId");

                            b1.Property<bool>("Bar0");

                            b1.Property<bool>("Bar1");

                            b1.Property<bool>("Bar2");

                            b1.Property<bool?>("Bar3");

                            b1.Property<bool?>("Bar4");

                            b1.Property<int>("Baz0");

                            b1.Property<int>("Baz1");

                            b1.Property<int>("Baz2");

                            b1.Property<int>("Baz3");

                            b1.Property<int?>("Baz4");

                            b1.Property<int?>("Baz5");

                            b1.Property<string>("Foo0");

                            b1.Property<string>("Foo1");

                            b1.Property<string>("Foo2");

                            b1.Property<string>("Foo3");

                            b1.Property<string>("Foo4");

                            b1.Property<string>("Foo5");

                            b1.Property<string>("Foo6");

                            b1.Property<string>("Foo7");

                            b1.Property<string>("Foo8");

                            b1.Property<string>("Foo9");

                            b1.Property<int>("OptionA");

                            b1.Property<int>("OptionB");

                            b1.Property<int>("OptionC");

                            b1.Property<int?>("OptionD");

                            b1.Property<int?>("OptionE");

                            b1.Property<int?>("OptionF");

                            b1.HasKey("AggregateRootId");

                            b1.ToTable("Roots");

                            b1.HasOne("BenchmarkEfCore.AggregateRoot")
                                .WithOne("ChildTwo3")
                                .HasForeignKey("BenchmarkEfCore.ChildTwo", "AggregateRootId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("BenchmarkEfCore.ChildTwo", "ChildTwo4", b1 =>
                        {
                            b1.Property<Guid>("AggregateRootId");

                            b1.Property<bool>("Bar0");

                            b1.Property<bool>("Bar1");

                            b1.Property<bool>("Bar2");

                            b1.Property<bool?>("Bar3");

                            b1.Property<bool?>("Bar4");

                            b1.Property<int>("Baz0");

                            b1.Property<int>("Baz1");

                            b1.Property<int>("Baz2");

                            b1.Property<int>("Baz3");

                            b1.Property<int?>("Baz4");

                            b1.Property<int?>("Baz5");

                            b1.Property<string>("Foo0");

                            b1.Property<string>("Foo1");

                            b1.Property<string>("Foo2");

                            b1.Property<string>("Foo3");

                            b1.Property<string>("Foo4");

                            b1.Property<string>("Foo5");

                            b1.Property<string>("Foo6");

                            b1.Property<string>("Foo7");

                            b1.Property<string>("Foo8");

                            b1.Property<string>("Foo9");

                            b1.Property<int>("OptionA");

                            b1.Property<int>("OptionB");

                            b1.Property<int>("OptionC");

                            b1.Property<int?>("OptionD");

                            b1.Property<int?>("OptionE");

                            b1.Property<int?>("OptionF");

                            b1.HasKey("AggregateRootId");

                            b1.ToTable("Roots");

                            b1.HasOne("BenchmarkEfCore.AggregateRoot")
                                .WithOne("ChildTwo4")
                                .HasForeignKey("BenchmarkEfCore.ChildTwo", "AggregateRootId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
